ws			= { (` ` | `\t`) } | ws `+` ws rn ws
wsp			= (` ` | `\t`) ws
rn			= { (` ` | `\t` | `\r` | `\n`) } (`\r` | `\n`)

letter		= `a` | `b` | ... | `y` | `z` | `A` | `B` | ... | `Y` | `Z`
numeral		= `0` | `1` | `2` | `3` | `4` | `5` | `6` | `7` | `8` | `9` | 
ident		= (letter | `_`) { (letter | numeral | `_`) }
number		= numeral { numeral }

char		=
string		= char { char }

# describe refal program
program		= ident wsp `START` rn body rn `END` rn
body		= unit { rn unit }
unit		= wsp dir | desc_spec | desc_func

# directives
dir			= `ENTRY` wsp `go` | empty_dir | extrn_dir
empty_dir	= `EMPTY` wsp ident { ws `,` ws ident }
extrn_dir	= `EXTRN` wsp extrn_decl { ws `,` ws extrn_decl }
extrn_decl	= ident [ ws `(` ws ident ws `)` ]

# describe specification
desc_spec	= ident wsp `S` wsp {elem_spec ws}
elem_spec	= `(` ws spec ws `)` | spec
spec		= `:` ident `:` | `/` ident `/` | `/` numeral `/` | `'` string `'`
				S | F | N | O | L | D | B | W
				
# describe function
desc_func	= go_func | any_func
go_func		= `go` wsp `=` work_exp
any_func	= ident [ func_sent ] { rn func_sent }
func_sent	= wsp [ (`L` | `R`) wsp ] patt_exp ws `=` ws work_exp

patt_exp	=
