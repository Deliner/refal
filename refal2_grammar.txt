S ->	IDENTIFIER `start` { LINE_FEED A }

A ->	PARAGRAPH D | IDENTIFIER K

D ->	`entry` `go` |
		`extrn` IDENTIFIER [ LEFT_PAREN IDENTIFIER RIGHT_PAREN ]
				{ COMMA IDENTIFIER [ LEFT_PAREN IDENTIFIER RIGHT_PAREN ] }
		`empty` IDENTIFIER { COMMA IDENTIFIER }
		`end`

K ->	`S` X | [ LINE_FEED ] C { LINE_FEED PARAGRAPH C }

X ->	{ [ B ] [ LEFT_PAREN B RIGHT_PAREN ] }
B ->	QUALIFIER | STRING | LABEL | NUMBER |
		`s` | `f` | `n` | `o` | `l` | `d` | `b` | `w`

C ->	( `l` | `r` | ) P EQUALITY E
P ->	{ T }
T ->	STRING | LABEL | NUMBER | V | LEFT_PAREN P RIGHT_PAREN
E ->	{ G }
G ->	STRING | LABEL | NUMBER | V | LEFT_PAREN E RIGHT_PAREN |
		LESS IDENTIFIER E GREAT

V ->	( `s` | `w` | `e` | `v` ) [ LEFT_PAREN X RIGHT_PAREN ] IDENTIFIER(1)
